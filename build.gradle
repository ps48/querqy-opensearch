/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: 'opensearch.opensearchplugin'

opensearchplugin {
    name 'opensearch-querqy'
    description 'Query rewriting plugin'
    classname 'querqy.opensearch.QuerqyPlugin'
    licenseFile rootProject.file('LICENSE.txt')
    noticeFile rootProject.file('NOTICE.txt')
}

buildscript {

    ext {
        opensearch_version = System.getProperty("opensearch.version", "2.0.0")
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
    }
}

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
    isSnapshot = "true" == System.getProperty("build.snapshot", "true")
}

repositories {
    mavenLocal()
}

allprojects {
    group = "org.opensearch"

    version = "${opensearch_version}" - "-SNAPSHOT" + ".0"
    if (isSnapshot) {
        version += "-SNAPSHOT"
    }

    plugins.withId('java') {
        sourceCompatibility = targetCompatibility = "11"
    }
}

dependencies {
    compile('org.querqy:querqy-lucene:5.4.lucene900.1') {
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    }

    compile('com.fasterxml.jackson.core:jackson-databind')
    compile('com.jayway.jsonpath:json-path:2.4.0')

    testImplementation('junit:junit:4.13')
    testImplementation('org.mockito:mockito-core:4.3.1')
    testImplementation('org.apache.logging.log4j:log4j-core:2.17.1')
    testImplementation('org.assertj:assertj-core:3.15.0')
}

test {
    useJUnit()
    finalizedBy jacocoTestReport
    include "**/*Test.class"
    systemProperties 'java.security.policy': file("$projectDir/plugin-security.policy").absolutePath
}

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

configurations.all {
    resolutionStrategy.force 'junit:junit:4.13.2'
    resolutionStrategy.force'com.fasterxml.jackson.core:jackson-databind:2.13.2'
}



forbiddenApisTest.enabled = false
// checkstyleTest.enabled = false

dependencyLicenses.enabled = false
licenseHeaders.enabled = false
thirdPartyAudit.enabled = false

loggerUsageCheck.enabled = false
testingConventions.enabled = false
validateNebulaPom.enabled = false

